reset()

result_b = nil

currentNAvg_smu_b = smub.measure.count
currentNPLC_smu_b = smub.measure.nplc
currentDelay_smu_b = smub.measure.delay

currentCurrentLimit_smu_b = smub.source.limiti
currentVoltageLimit_smu_b = smub.source.limitv
currentOutputFunc_smu_b = smub.source.func

currentMeasureCurrent_smub_AutorangeState = smub.measure.autorangei
currentMeasureVoltage_smub_AutorangeState = smub.measure.autorangev

currentMeasureFunction_smub = display.smub.measure.func

function SetVoltage_smub(srcVolt, srcLimitI)
	_srcVolt = tonumber(srcVolt)
	_srcLimitI = tonumber(srcLimitI)
	
	if currentOutputFunc_smu_b ~= smub.OUTPUT_DCVOLTS then
		currentOutputFunc_smu_b = smub.OUTPUT_DCVOLTS
		smub.source.func = smub.OUTPUT_DCVOLTS
	end
	
	if currentCurrentLimit_smu_b ~= _srcLimitI then
		currentCurrentLimit_smu_b = _srcLimitI
		smub.source.limiti = _srcLimitI
	end
	
	smub.source.levelv = _srcVolt
end

function MeasureVoltage_smub(devAvg, devNPLC, devDelay)
	if currentMeasureFunction_smub ~= display.MEASURE_DCVOLTS then
		currentMeasureFunction_smub = display.MEASURE_DCVOLTS
		display.smub.measure.func = display.MEASURE_DCVOLTS
	end
	
	_devAvg = tonumber(devAvg)
	_devNPLC = tonumber(devNPLC)
	_devDelay = tonumber(devDelay)
	
	if currentNPLC_smu_b ~= _devNPLC then
		currentNPLC_smu_b = _devNPLC
		
		if _devNPLC < 0.01 then
			_devNPLC = 0.01
		elseif _devNPLC > 25.0 then
			_devNPLC = 25.0
		end
		
		smub.measure.nplc = _devNPLC
	end
	
	if currentDelay_smu_b ~= _devDelay then
		currentDelay_smu_b = _devDelay
		
		if _devDelay == 0.0 then
			smub.measure.delay = smub.DELAY_AUTO
		else smub.measure.delay = _devDelay
		end
	end
	
	if _devAvg ~= currentNAvg_smu_b then
		currentNAvg_smu_b = _devAvg
		
		if  _devAvg < 1 then
			_devAvg = 1
		elseif  _devAvg > 9999 then
			_devAvg = 9999
		end
		
		smub.measure.count = _devAvg
	end
	
	smub.nvbuffer1.clear()
	smub.measure.v(smub.nvbuffer1)
	
	result_b = 0.0
	for loopIterator = 1, smub.nvbuffer1.n do
		result_b = result_b + smub.nvbuffer1[loopIterator]
	end
	
	result_b = result_b / _devAvg
	
	print(result_b)
end

function SetCurrent_smub(srcCurr, srcLimitV)
	_srcCurr = tonumber(srcCurr)
	_srcLimitV = tonumber(srcLimitV)
	
	if currentOutputFunc_smu_b ~= smub.OUTPUT_DCAMPS then
		currentOutputFunc_smu_b = smub.OUTPUT_DCAMPS
		smub.source.func = smub.OUTPUT_DCAMPS
	end
	
	if currentVoltageLimit_smu_b ~= _srcLimitV then
		currentVoltageLimit_smu_b = _srcLimitV
		smub.source.limitv = _srcLimitV
	end
	
	smub.source.leveli = _srcCurr
end

function MeasureCurrent_smub(devAvg, devNPLC, devDelay)
	if currentMeasureFunction_smub ~= display.MEASURE_DCAMPS then
		currentMeasureFunction_smub = display.MEASURE_DCAMPS
		display.smub.measure.func = display.MEASURE_DCAMPS
	end
	
	_devAvg = tonumber(devAvg)
	_devNPLC = tonumber(devNPLC)
	_devDelay = tonumber(devDelay)
	
	if currentNPLC_smu_b ~= _devNPLC then
		currentNPLC_smu_b = _devNPLC
		
		if _devNPLC < 0.01 then
			_devNPLC = 0.01
		elseif _devNPLC > 25.0 then
			_devNPLC = 25.0
		end
		
		smub.measure.nplc = _devNPLC
	end
	
	if currentDelay_smu_b ~= _devDelay then
		currentDelay_smu_b = _devDelay
		
		if _devDelay == 0.0 then
			smub.measure.delay = smub.DELAY_AUTO
		else smub.measure.delay = _devDelay
		end
	end
	
	if _devAvg ~= currentNAvg_smu_b then
		currentNAvg_smu_b = _devAvg
		
		if  _devAvg < 1 then
			_devAvg = 1
		elseif  _devAvg > 9999 then
			_devAvg = 9999
		end
		
		smub.measure.count = _devAvg
	end
	
	smub.nvbuffer1.clear()
	smub.measure.i(smub.nvbuffer1)
	
	result_b = 0.0
	for loopIterator = 1, smub.nvbuffer1.n do
		result_b = result_b + smub.nvbuffer1[loopIterator]
	end
	
	result_b = result_b / _devAvg
	
	print(result_b)
end

function MeasureResistance_smub(devAvg, devNPLC, devDelay)
	if currentMeasureFunction_smub ~= display.MEASURE_OHMS then
		currentMeasureFunction_smub = display.MEASURE_OHMS
		display.smub.measure.func = display.MEASURE_OHMS
	end
	
	_devAvg = tonumber(devAvg)
	_devNPLC = tonumber(devNPLC)
	_devDelay = tonumber(devDelay)
	
	if currentNPLC_smu_b ~= _devNPLC then
		currentNPLC_smu_b = _devNPLC
		
		if _devNPLC < 0.01 then
			_devNPLC = 0.01
		elseif _devNPLC > 25.0 then
			_devNPLC = 25.0
		end
		
		smub.measure.nplc = _devNPLC
	end
	
	if currentDelay_smu_b ~= _devDelay then
		currentDelay_smu_b = _devDelay
		
		if _devDelay == 0.0 then
			smub.measure.delay = smub.DELAY_AUTO
		else smub.measure.delay = _devDelay
		end
	end
	
	if _devAvg ~= currentNAvg_smu_b then
		currentNAvg_smu_b = _devAvg
		
		if  _devAvg < 1 then
			_devAvg = 1
		elseif  _devAvg > 9999 then
			_devAvg = 9999
		end
		
		smub.measure.count = _devAvg
	end
	
	smub.nvbuffer1.clear()
	smub.measure.r(smub.nvbuffer1)
	
	result_b = 0.0
	for loopIterator = 1, smub.nvbuffer1.n do
		result_b = result_b + smub.nvbuffer1[loopIterator]
	end
	
	result_b = result_b / _devAvg
	
	print(result_b)
end

function MeasureConductance_smub(devAvg, devNPLC, devDelay)
	if currentMeasureFunction_smub ~= display.MEASURE_OHMS then
		currentMeasureFunction_smub = display.MEASURE_OHMS
		display.smub.measure.func = display.MEASURE_OHMS
	end
	
	_devAvg = tonumber(devAvg)
	_devNPLC = tonumber(devNPLC)
	_devDelay = tonumber(devDelay)
	
	if currentNPLC_smu_b ~= _devNPLC then
		currentNPLC_smu_b = _devNPLC
		
		if _devNPLC < 0.01 then
			_devNPLC = 0.01
		elseif _devNPLC > 25.0 then
			_devNPLC = 25.0
		end
		
		smub.measure.nplc = _devNPLC
	end
	
	if currentDelay_smu_b ~= _devDelay then
		currentDelay_smu_b = _devDelay
		
		if _devDelay == 0.0 then
			smub.measure.delay = smub.DELAY_AUTO
		else smub.measure.delay = _devDelay
		end
	end
	
	if _devAvg ~= currentNAvg_smu_b then
		currentNAvg_smu_b = _devAvg
		
		if _devAvg < 1 then
			_devAvg = 1
		elseif  _devAvg > 9999 then
			_devAvg = 9999
		end
		
		smub.measure.count = _devAvg
	end
	
	smub.nvbuffer1.clear()
	smub.measure.r(smub.nvbuffer1)
	
	result_b = 0.0
	for loopIterator = 1, smub.nvbuffer1.n do
		result_b = result_b + smub.nvbuffer1[loopIterator]
	end
	
	result_b = 1.0 / (result_b / _devAvg)
	
	print(result_b)
end
			
function DCSweepVLinear_smub(start, stop, numPoints, limitI, nplc)
	reset()
	
	smub.reset()
	
	display.smub.measure.func = display.MEASURE_DCAMPS
	
	smub.source.func = smub.OUTPUT_DCVOLTS
	smub.source.limiti = limitI
	smub.measure.nplc = nplc
	smub.measure.delay = smub.DELAY_AUTO
	
	smub.nvbuffer1.clear()
	smub.nvbuffer1.collecttimestamps = 1
	smub.nvbuffer2.clear()
	smub.nvbuffer2.collecttimestamps = 1
	
	smub.trigger.source.linearv(start, stop, numPoints)
	smub.trigger.source.limiti = limitI
	smub.trigger.measure.action = smub.ENABLE
	smub.trigger.measure.iv(smub.nvbuffer1, smub.nvbuffer2)
	smub.trigger.endpulse.action = smub.SOURCE_HOLD
	smub.trigger.endsweep.action = smub.SOURCE_IDLE
	smub.trigger.count = numPoints
	smub.trigger.source.action = smub.ENABLE
	
	smub.source.output = smub.OUTPUT_ON
	smub.trigger.initiate()
	waitcomplete()
	smub.source.output = smub.OUTPUT_OFF
	
	for x = 1, smub.nvbuffer1.n do
		print(smub.nvbuffer1.timestamps[x] .. " " .. smub.nvbuffer2[x] .. " " .. smub.nvbuffer1[x])
	end
end

function DCSweepILinear_smub(start, stop, numPoints, limitV, nplc)
	reset()
	
	smub.reset()
	
	display.smub.measure.func = display.MEASURE_DCVOLTS
	
	smub.source.func = smub.OUTPUT_DCAMPS
	smub.source.limitv = limitV
	smub.measure.nplc = nplc
	smub.measure.delay = smub.DELAY_AUTO
	
	smub.nvbuffer1.clear()
	smub.nvbuffer1.collecttimestamps = 1
	smub.nvbuffer2.clear()
	smub.nvbuffer2.collecttimestamps = 1
	smub.trigger.source.lineari(start, stop, numPoints)
	smub.trigger.source.limitv = limitV
	smub.trigger.measure.action = smub.ENABLE
	smub.trigger.measure.iv(smub.nvbuffer1, smub.nvbuffer2)
	smub.trigger.endpulse.action = smub.SOURCE_HOLD
	
	smub.trigger.endsweep.action = smub.SOURCE_IDLE
	smub.trigger.count = numPoints
	smub.trigger.source.action = smub.ENABLE
	
	smub.source.output = smub.OUTPUT_ON
	smub.trigger.initiate()
	waitcomplete()
	smub.source.output = smub.OUTPUT_OFF
	
	for x = 1, smub.nvbuffer1.n do
		print(smub.nvbuffer1.timestamps[x] .. " " .. smub.nvbuffer2[x] .. " " .. smub.nvbuffer1[x])
	end
end

function DCSweepVLog_smub(start, stop, numPoints, limitI, nplc)
	reset()
	
	smub.reset()
	
	display.smub.measure.func = display.MEASURE_DCAMPS
	
	smub.source.func = smub.OUTPUT_DCVOLTS
	smub.source.limiti = limitI
	smub.measure.nplc = nplc
	smub.measure.delay = smub.DELAY_AUTO
	
	smub.nvbuffer1.clear()
	smub.nvbuffer1.collecttimestamps = 1
	smub.nvbuffer2.clear()
	smub.nvbuffer2.collecttimestamps = 1
	
	smub.trigger.source.logv(start, stop, numPoints, 0)
	smub.trigger.source.limiti = limitI
	smub.trigger.measure.action = smub.ENABLE
	smub.trigger.measure.iv(smub.nvbuffer1, smub.nvbuffer2)
	smub.trigger.endpulse.action = smub.SOURCE_HOLD
	
	smub.trigger.endsweep.action = smub.SOURCE_IDLE
	smub.trigger.count = numPoints
	smub.trigger.source.action = smub.ENABLE
	
	smub.source.output = smub.OUTPUT_ON
	smub.trigger.initiate()
	waitcomplete()
	smub.source.output = smub.OUTPUT_OFF
	
	for x = 1, smub.nvbuffer1.n do
		print(smub.nvbuffer1.timestamps[x] .. " " .. smub.nvbuffer2[x] .. " " .. smub.nvbuffer1[x])
	end
end

function DCSweepILog_smub(start, stop, numPoints, limitV, nplc)
	reset()
	
	smub.reset()
	
	display.smub.measure.func = display.MEASURE_DCVOLTS
	
	smub.source.func = smub.OUTPUT_DCAMPS
	smub.source.limitv = limitV
	smub.measure.nplc = nplc
	smub.measure.delay = smub.DELAY_AUTO
	
	smub.nvbuffer1.clear()
	smub.nvbuffer1.collecttimestamps = 1
	smub.nvbuffer2.clear()
	smub.nvbuffer2.collecttimestamps = 1
	
	smub.trigger.source.logi(start, stop, numPoints)
	smub.trigger.source.limitv = limitV
	smub.trigger.measure.action = smub.ENABLE
	smub.trigger.measure.iv(smub.nvbuffer1, smub.nvbuffer2)
	smub.trigger.endpulse.action = smub.SOURCE_HOLD
	
	smub.trigger.endsweep.action = smub.SOURCE_IDLE
	smub.trigger.count = numPoints
	smub.trigger.source.action = smub.ENABLE
	smub.source.output = smub.OUTPUT_ON
	smub.trigger.initiate()
	waitcomplete()
	smub.source.output = smub.OUTPUT_OFF
	
	for x = 1, smub.nvbuffer1.n do
		print(smub.nvbuffer1.timestamps[x] .. " " .. smub.nvbuffer2[x] .. " " .. smub.nvbuffer1[x])
	end
end

function DCSweepVList_smub(sweepList, numPoints, limitI, nplc)
	if sweepList == nil or type(sweepList) ~= "table" then
		sweepList = {1, 5, 2, 6, 3, 7, 4, 8, 5, 9, 6, 10}
	end
	
	reset()
	
	smub.reset()
	
	display.smub.measure.func = display.MEASURE_DCAMPS
	
	smub.source.func = smub.OUTPUT_DCVOLTS
	smub.source.limiti = limitI
	smub.measure.nplc = nplc
	smub.measure.delay = smub.DELAY_AUTO
	
	smub.nvbuffer1.clear()
	smub.nvbuffer1.collecttimestamps = 1
	smub.nvbuffer2.clear()
	smub.nvbuffer2.collecttimestamps = 1
	
	smub.trigger.source.listv(sweepList)
	smub.trigger.source.limiti = limitI
	smub.trigger.measure.action = smub.ENABLE
	smub.trigger.measure.iv(smub.nvbuffer1, smub.nvbuffer2)
	smub.trigger.endpulse.action = smub.SOURCE_HOLD
	
	smub.trigger.endsweep.action = smub.SOURCE_IDLE
	smub.trigger.count = numPoints
	smub.trigger.source.action = smub.ENABLE
	
	smub.source.output = smub.OUTPUT_ON
	smub.trigger.initiate()
	waitcomplete()
	smub.source.output = smub.OUTPUT_OFF
	
	for x = 1, smub.nvbuffer1.n do
		print(smub.nvbuffer1.timestamps[x] .. " " .. smub.nvbuffer2[x] .. " " .. smub.nvbuffer1[x])
	end
end

function DCSweepIList_smub(sweepList, numPoints, limitV, nplc)
	if sweepList == nil or type(sweepList) ~= "table" then
		sweepList = {1e-3, 5e-3, 2e-3, 6e-3, 3e-3, 7e-3, 4e-3, 8e-3, 5e-3, 9e-3, 6e-3, 10e-3}
	end
	
	reset()
	
	smub.reset()
	
	display.smub.measure.func = display.MEASURE_DCVOLTS
	
	smub.source.func = smub.OUTPUT_DCAMPS
	smub.source.limitv = limitV
	smub.measure.nplc = nplc
	smub.measure.delay = smub.DELAY_AUTO
	
	smub.nvbuffer1.clear()
	smub.nvbuffer1.collecttimestamps = 1
	smub.nvbuffer2.clear()
	smub.nvbuffer2.collecttimestamps = 1
	
	smub.trigger.source.listi(sweepList)
	smub.trigger.source.limitv = limitV
	smub.trigger.measure.action = smub.ENABLE
	smub.trigger.measure.iv(smub.nvbuffer1, smub.nvbuffer2)
	smub.trigger.endpulse.action = smub.SOURCE_HOLD
	
	smub.trigger.endsweep.action = smub.SOURCE_IDLE
	smub.trigger.count = numPoints
	smub.trigger.source.action = smub.ENABLE
	
	smub.source.output = smub.OUTPUT_ON
	smub.trigger.initiate()
	waitcomplete()
	smub.source.output = smub.OUTPUT_OFF
	
	for x = 1, smub.nvbuffer1.n do
		print(smub.nvbuffer1.timestamps[x] .. " " .. smub.nvbuffer2[x] .. " " .. smub.nvbuffer1[x])
	end
end

--[[
	Title:			KE26XXB Pulsed Sweep Single

	Description:	This example demonstrates how to output a pulsed sweep
		on a single SMU channel.  This script performs a linear sweep but
		can easily be modified to perform log or list sweeps.
		There are two functions contained in this script.  One function
		performs a pulsed voltage sweep while the other performs a pulsed
		current sweep.
		At the conclusion of the sweeps the data is returned to the
		instrument console in a format that is compatible for copy and
		paste into Microsoft Excel.

	Equipment Needed:
		1x Series 2600B SourceMeter instrument

	Script Functions:
		PulsedSweepVSingle(start, stop, numPoints, pulseWidth, pulsePeriod, limitI, nplc, remoteSense)
		PulsedSweepISingle(start, stop, numPoints, pulseWidth, pulsePeriod, limitV, nplc, remoteSense)
--]]

--[[
	Name:	PulsedSweepVSingle(start, stop, numPoints, pulseWidth, pulsePeriod, limitI, nplc, remoteSense)
	
	Description:
		This function performs a pulsed linear voltage sweep on a single SMU channel.

	Parameters:
		start:			The voltage level of the first step in the sweep in volts
		stop:			The voltage level of the last step in the sweep in volts
		numPoints:		The number of points in the sweep
		pulseWidth:		The width of the pulse in seconds
		pulsePeriod:	The time from the start of one pulse to the start of the next pulse
		limitI:			The current limit of the pulse in amps
		nplc:			The measurment aperture setting in PLCs where 1 PLC = 1/60 s for 60Hz power
		remoteSense		Set to true to enable 4-Wire (Kelvin) measurements or to false for 2-Wire measurements

	Example Usage:
		PulsedSweepVSingle(0, 10, 11, 1e-3, 5e-3, 0.1, 0.001, false)
--]]
function PulsedSweepVSingle_smub(start, stop, numPoints, pulseWidth, pulsePeriod, limitI, nplc, remoteSense)
	reset()
	smub.reset()
	smub.source.func					= smub.OUTPUT_DCVOLTS
	if remoteSense == true then
		smub.sense						= smub.SENSE_REMOTE
	else
		smub.sense						= smub.SENSE_LOCAL
	end
	smub.source.autorangev			= smub.AUTORANGE_OFF
	smub.source.rangev				= math.max(math.abs(start), math.abs(stop))
	smub.source.levelv				= 0
	-- Set the DC bias limit.  This is not the limit used during the pulses.
	smub.source.limiti				= 0.1

	-- Disabling Auto-Ranging and Auto-Zero ensures accurate and consistent timing
	smub.measure.autozero			= smub.AUTOZERO_ONCE
	smub.measure.autorangei			= smub.AUTORANGE_OFF
	smub.measure.rangei				= limitI
	smub.measure.nplc				= nplc
	-- A timer will be used to control the measure delay so set the built-in delay to 0
	smub.measure.delay				= 0

	-- Prepare the Reading Buffers
	smub.nvbuffer1.clear()
	smub.nvbuffer1.collecttimestamps= 1
	smub.nvbuffer2.clear()
	smub.nvbuffer2.collecttimestamps= 1

	-- Configure the Trigger Model
	--============================
	-- Pressing the TRIG button on the front panel will trigger the sweep to start
	
	display.trigger.clear()
	
	display.clear()
	display.settext("Press TRIG button")

	-- Timer 1 controls the pulse period
	trigger.timer[1].count			= numPoints > 1 and numPoints - 1 or 1
	trigger.timer[1].delay			= pulsePeriod
	trigger.timer[1].passthrough	= true
	trigger.timer[1].stimulus		= display.trigger.EVENT_ID

	-- Timer 2 controls the measure delay
	trigger.timer[2].count			= 1
	-- Set the measure delay long enough so that measurements start after the pulse
	-- has settled, but short enough that it fits within the width of the pulse.
	trigger.timer[2].delay			= pulseWidth - (1/localnode.linefreq)*nplc - 60e-6
	trigger.timer[2].passthrough	= false
	trigger.timer[2].stimulus		= trigger.timer[1].EVENT_ID
	
	-- Timer 3 controls the pulse width
	trigger.timer[3].count			= 1
	trigger.timer[3].delay			= pulseWidth
	trigger.timer[3].passthrough	= false
	trigger.timer[3].stimulus		= trigger.timer[1].EVENT_ID

	-- Configure SMU Trigger Model for Sweep
	smub.trigger.source.linearv(start, stop, numPoints)
	smub.trigger.source.limiti		= limitI
	smub.trigger.measure.action		= smub.ENABLE
	smub.trigger.measure.iv(smub.nvbuffer1, smub.nvbuffer2)
	smub.trigger.endpulse.action	= smub.SOURCE_IDLE
	smub.trigger.endsweep.action	= smub.SOURCE_IDLE
	smub.trigger.count				= numPoints
	smub.trigger.arm.stimulus		= 0
	smub.trigger.source.stimulus	= trigger.timer[1].EVENT_ID
	smub.trigger.measure.stimulus	= trigger.timer[2].EVENT_ID
	smub.trigger.endpulse.stimulus	= trigger.timer[3].EVENT_ID
	smub.trigger.source.action		= smub.ENABLE
	--==============================
	-- End Trigger Model Configuration

	smub.source.output				= smub.OUTPUT_ON

	-- Start the trigger model execution
	smub.trigger.initiate()
	-- Sweep will not start TRIG button is pressed

	-- Wait until the sweep has completed
	waitcomplete()
	
	display.clear()
	display.settext("Measurement is Done!")
	
	smub.source.output				= smub.OUTPUT_OFF

	-- Print the data back to the Console in tabular format
	for x = 1, smub.nvbuffer1.n do
		-- Voltage readings are in nvbuffer2.  Current readings are in nvbuffer1.
		print(smub.nvbuffer1.timestamps[x] .. " " .. smub.nvbuffer2[x] .. " " .. smub.nvbuffer1[x])
	end
end

--[[
	Name:	PulsedSweepISingle(start, stop, numPoints, pulseWidth, pulsePeriod, limitV, nplc, remoteSense)
	
	Description:
		This function performs a pulsed linear current sweep on a single SMU channel.

	Parameters:
		start:			The current level of the first step in the sweep in amps
		stop:			The current level of the last step in the sweep in amps
		numPoints:		The number of points in the sweep
		pulseWidth:		The width of the pulse in seconds
		pulsePeriod:	The time from the start of one pulse to the start of the next pulse
		limitI:			The voltage limit of the pulse in volts
		nplc:			The measurment aperture setting in PLCs where 1 PLC = 1/60 s for 60Hz power
		remoteSense		Set to true to enable 4-Wire (Kelvin) measurements or to false for 2-Wire measurements

	Example Usage:
		PulsedSweepISingle(0, 10e-3, 11, 1e-3, 5e-3, 10, 0.001, false)
--]]
function PulsedSweepISingle_smub(start, stop, numPoints, pulseWidth, pulsePeriod, limitV, nplc, remoteSense)
	reset()
	smub.reset()
	smub.source.func					= smub.OUTPUT_DCAMPS
	if remoteSense == true then
		smub.sense						= smub.SENSE_REMOTE
	else
		smub.sense						= smub.SENSE_LOCAL
	end
	smub.source.autorangei			= smub.AUTORANGE_OFF
	smub.source.rangei				= math.max(math.abs(start), math.abs(stop))
	smub.source.leveli				= 0
	-- Set the DC bias limit.  This is not the limit used during the pulses.
	smub.source.limitv				= 1

	-- Disabling Auto-Ranging and Auto-Zero ensures accurate and consistent timing
	smub.measure.autozero			= smub.AUTOZERO_ONCE
	smub.measure.autorangev			= smub.AUTORANGE_OFF
	smub.measure.rangev				= limitV
	smub.measure.nplc				= nplc
	-- A timer will be used to control the measure delay so set the built-in delay to 0
	smub.measure.delay				= 0

	-- Prepare the Reading Buffers
	smub.nvbuffer1.clear()
	smub.nvbuffer1.collecttimestamps= 1
	smub.nvbuffer2.clear()
	smub.nvbuffer2.collecttimestamps= 1

	-- Configure the Trigger Model
	--============================
	-- Pressing the TRIG button on the front panel will trigger the sweep to start
	
	display.trigger.clear()
	
	display.clear()
	display.settext("Press TRIG button")

	-- Timer 1 controls the pulse period
	trigger.timer[1].count			= numPoints > 1 and numPoints - 1 or 1
	trigger.timer[1].delay			= pulsePeriod
	trigger.timer[1].passthrough	= true
	trigger.timer[1].stimulus		= display.trigger.EVENT_ID

	-- Timer 2 controls the measure delay
	trigger.timer[2].count			= 1
	-- Set the measure delay long enough so that measurements start after the pulse
	-- has settled, but short enough that it fits within the width of the pulse.
	trigger.timer[2].delay			= pulseWidth - (1/localnode.linefreq)*nplc - 60e-6
	trigger.timer[2].passthrough	= false
	trigger.timer[2].stimulus		= trigger.timer[1].EVENT_ID

	-- Timer 3 controls the pulse width
	trigger.timer[3].count			= 1
	trigger.timer[3].delay			= pulseWidth
	trigger.timer[3].passthrough	= false
	trigger.timer[3].stimulus		= trigger.timer[1].EVENT_ID

	-- Configure SMU Trigger Model for Sweep
	smub.trigger.source.lineari(start, stop, numPoints)
	smub.trigger.source.limitv		= limitV
	smub.trigger.measure.action		= smub.ENABLE
	smub.trigger.measure.iv(smub.nvbuffer1, smub.nvbuffer2)
	smub.trigger.endpulse.action	= smub.SOURCE_IDLE
	smub.trigger.endsweep.action	= smub.SOURCE_IDLE
	smub.trigger.count				= numPoints
	smub.trigger.arm.stimulus		= 0
	smub.trigger.source.stimulus	= trigger.timer[1].EVENT_ID
	smub.trigger.measure.stimulus	= trigger.timer[2].EVENT_ID
	smub.trigger.endpulse.stimulus	= trigger.timer[3].EVENT_ID
	smub.trigger.source.action		= smub.ENABLE
	--==============================
	-- End Trigger Model Configuration

	smub.source.output				= smub.OUTPUT_ON

	-- Start the trigger model execution
	smub.trigger.initiate()
	-- Sweep will not start until the TRIG button is pressed

	-- Wait until the sweep has completed
	waitcomplete()
	
	display.clear()
	display.settext("Measurement is Done!")
	
	smub.source.output				= smub.OUTPUT_OFF

	-- Print the data back to the Console in tabular format
	for x=1,smub.nvbuffer1.n do
		-- Voltage readings are in nvbuffer2.  Current readings are in nvbuffer1.
		print(smub.nvbuffer1.timestamps[x] .. " " .. smub.nvbuffer2[x] .. " " .. smub.nvbuffer1[x])
	end
end

function Reset_smub()
	smub.reset();
end